{"version":3,"sources":["Todos/Todos.js","Todos/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","onClick","id","className","key","content","AddTodo","state","handleSubmit","e","preventDefault","_this","props","addTodo","setState","handleChange","target","value","onSubmit","this","type","onChange","required","Component","App","filter","Math","random","concat","Object","toConsumableArray","src_Todos_Todos","Todos_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA8BeA,SA1BD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WAEbC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OACIC,EAAAC,EAAAC,cAAA,OACIC,QAAU,WAAKR,EAAWI,EAAKK,KAC/BC,UAAU,uBACVC,IAAOP,EAAKK,IAEZJ,EAAAC,EAAAC,cAAA,YAAOH,EAAKQ,YAKxBP,EAAAC,EAAAC,cAAA,KAAGG,UAAU,UAAb,gCAGJ,OACIL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACTT,KCcCY,6MAlCXC,MAAQ,CACJF,QAAS,MAGbG,aAAe,SAACC,GACZA,EAAEC,iBACFC,EAAKC,MAAMC,QAAQF,EAAKJ,OACxBI,EAAKG,SAAS,CAACT,QAAS,QAG5BU,aAAe,SAACN,GACZE,EAAKG,SAAS,CACVT,QAAUI,EAAEO,OAAOC,iFAKvB,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,SAAaC,KAAKX,cACpBV,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SACIoB,KAAK,OACLC,SAAaF,KAAKJ,aAClBE,MAAUE,KAAKZ,MAAMF,QACrBiB,UAAQ,aA3BVC,aCyCPC,6MAtCbjB,MAAQ,CACNf,MAAM,CACJ,CAACU,GAAI,EAAGG,QAAS,YACjB,CAACH,GAAI,EAAGG,QAAS,iBACjB,CAACH,GAAI,EAAGG,QAAS,qBAIrBZ,WAAa,SAACS,GACZ,IAAMV,EAAQmB,EAAKJ,MAAMf,MAAMiC,OAAO,SAAA5B,GAAI,OAAIA,EAAKK,KAAOA,IAC1DS,EAAKG,SAAS,CAACtB,aAGjBqB,QAAU,SAAChB,GACTA,EAAKK,GAAKwB,KAAKC,SACf,IAAMnC,EAAK,GAAAoC,OAAAC,OAAAC,EAAA,EAAAD,CAAOlB,EAAKJ,MAAMf,OAAlB,CAAyBK,IACpCc,EAAKG,SAAS,CACZtB,mFAKF,OACIM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,oBAAd,UAEAL,EAAAC,EAAAC,cAAC+B,EAAD,CACEvC,MAAS2B,KAAKZ,MAAMf,MACpBC,WAAc0B,KAAK1B,aAErBK,EAAAC,EAAAC,cAACgC,EAAD,CACEnB,QAAWM,KAAKN,kBAjCVU,aCSEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2aba6f18.chunk.js","sourcesContent":["import React from 'react';\nimport './Todos.css'\n\n\nconst Todos = ({todos, deleteTodo}) => {\n\n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return (\n                <div\n                    onClick ={()=>{deleteTodo(todo.id)}}\n                    className=\"collection-item todo\"\n                    key = {todo.id}\n                >\n                    <span>{todo.content}</span>\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"center\"> You have no todos left, yay</p>\n    )\n\n    return(\n        <div className=\"todos collection\">\n            { todoList }\n        </div>\n    )\n\n}\n\nexport default Todos;","import React, {Component} from 'react';\n\nclass AddTodo extends Component{\n\n    state = {\n        content: ''\n    }\n\n    handleSubmit = (e) =>{\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        this.setState({content: \"\"})\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            content : e.target.value\n        });\n    }\n\n    render(){\n        return(\n            <div>\n                <form onSubmit = { this.handleSubmit }>\n                    <label>Add new todo:</label>\n                    <input\n                        type=\"text\"\n                        onChange = { this.handleChange }\n                        value = { this.state.content }\n                        required\n                        >\n                    </input>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from './Todos/Todos';\nimport AddTodo from './Todos/AddTodo'\nclass App extends Component {\n\n  state = {\n    todos:[\n      {id: 1, content: 'Buy Milk'},\n      {id: 2, content: 'Play Open TTD'},\n      {id: 3, content: 'Watch a movie'},\n    ]\n  }\n\n  deleteTodo = (id) =>{\n    const todos = this.state.todos.filter(todo => todo.id !== id)\n    this.setState({todos})\n  }\n\n  addTodo = (todo) =>{\n    todo.id = Math.random()\n    const todos = [...this.state.todos, todo];\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return (\n        <div className=\"todo-app container\">\n          <h1 className=\"center blue-text\">Todo's</h1>\n\n          <Todos\n            todos = {this.state.todos}\n            deleteTodo = {this.deleteTodo}\n          />\n          <AddTodo\n            addTodo = {this.addTodo}\n          />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}